generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma-logger"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("LOGGER_DATABASE_URL")
}

model collectors {
  id            Int                @id @default(autoincrement())
  ip            String             @db.VarChar(50)
  username      String             @db.VarChar(50)
  password      String             @db.VarChar(255)
  database_name String             @default("syslog_db") @db.VarChar(50)
  status        collectors_status? @default(active)
  created_at    DateTime?          @default(now()) @db.Timestamp(0)
  log_mirror    log_mirror[]
}

model log_mirror {
  id           Int        @id @default(autoincrement())
  collector_id Int
  received_at  DateTime?  @db.DateTime(0)
  hostname     Int?
  facility     String?    @db.VarChar(50)
  synced_at    DateTime?  @default(now()) @db.Timestamp(0)
  event        String?    @db.VarChar(50)
  path         String?    @db.Text
  file_folder  String?    @db.VarChar(50)
  size         String?    @db.VarChar(50)
  user         Int?
  ip           String?    @db.VarChar(50)
  message      String     @db.Text
  category     String?    @db.Text
  collectors   collectors @relation(fields: [collector_id], references: [id], onDelete: Cascade, map: "fk_collector_logmirror")
  devices      devices?   @relation(fields: [hostname], references: [id], onDelete: Cascade, map: "fk_hostname_devices")
  users        users?     @relation(fields: [user], references: [id], onDelete: Cascade, map: "fk_user_users")

  @@index([collector_id], map: "fk_collector_logmirror")
  @@index([hostname], map: "hostname")
  @@index([user], map: "user")
}

model devices {
  id                Int                 @id @default(autoincrement())
  host_name         String              @unique(map: "host_name") @db.VarChar(255)
  status            String?             @default("active") @db.VarChar(50)
  port              Int?
  ip                String              @db.VarChar(100)
  created_at        DateTime            @db.DateTime(0)
  updated_at        DateTime            @db.DateTime(0)
  device_file_types device_file_types[]
  log_mirror        log_mirror[]
  secure_folders    secure_folders[]
  work_time         work_time[]
}

model users {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  ip         String       @db.VarChar(45)
  created_at DateTime     @db.DateTime(0)
  updated_at DateTime     @db.DateTime(0)
  log_mirror log_mirror[]

  @@unique([name, ip], map: "unique_user_ip")
}

model admin {
  id           Int       @id @default(autoincrement())
  name         String?
  email        String    @unique(map: "User_email_key")
  passwordHash String?
  company      String
  created_at   DateTime  @default(now()) @db.Timestamp(0)
  updated_at   DateTime  @default(now()) @db.Timestamp(0)
  session      session[]
}

model session {
  id           String   @id
  adminId      Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  expires      DateTime
  sessionToken String   @unique(map: "Session_sessionToken_key")
  admin        admin    @relation(fields: [adminId], references: [id], onDelete: Cascade, map: "fk_adminID_admin")

  @@index([adminId], map: "Session_userId_fkey")
}

model file_types {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(50)
  extension         String              @db.Text
  allow             Int                 @db.TinyInt
  max_size          Int
  created_at        DateTime            @default(now()) @db.Timestamp(0)
  updated_at        DateTime            @default(now()) @db.Timestamp(0)
  device_file_types device_file_types[]
}

model secure_folders {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(50)
  device_id  Int
  path       String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  devices    devices  @relation(fields: [device_id], references: [id], onDelete: Cascade, map: "fk_deviceId_device")

  @@index([device_id], map: "device_id")
}

model device_file_types {
  device_id    Int
  file_type_id Int
  max_size     Float      @db.Float
  allow        Int        @db.TinyInt
  devices      devices    @relation(fields: [device_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "device_file_types_ibfk_1")
  file_types   file_types @relation(fields: [file_type_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "device_file_types_ibfk_2")

  @@id([device_id, file_type_id])
  @@index([file_type_id], map: "file_type_id")
}

model work_time {
  id         Int      @id @default(autoincrement())
  device_id  Int
  period     String   @db.Text
  from       DateTime @db.Time(0)
  to         DateTime @db.Time(0)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  devices    devices  @relation(fields: [device_id], references: [id], onDelete: Cascade, map: "fk_deviceId_devices")

  @@index([device_id], map: "device_id")
}

model project_details {
  id         Int      @id @default(autoincrement())
  key        String   @db.Text
  project_id Int
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
}

enum collectors_status {
  active
  inactive
}
